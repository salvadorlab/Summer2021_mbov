theme_minimal()
ggplot(rising_mu,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
params <- c(beta=0.3,gamma=1/7,alpha=0.04,mu=0.07) #function c "c"ombines values into
rising_alpha1 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_alpha1$type <- "low"
params <- c(beta=0.3,gamma=1/7,alpha=0.1,mu=0.07) #function c "c"ombines values into
rising_alpha2 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_alpha2$type <- "medium"
params <- c(beta=0.3,gamma=1/7,alpha=0.15,mu=0.07) #function c "c"ombines values into
rising_alpha3 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_alpha3$type <- "high"
rising_alpha <- rbind(rising_alpha1,rising_alpha2,rising_alpha3)
params <- c(beta=0.3,gamma=1/7,alpha=0.1,mu=0.03) #function c "c"ombines values into
rising_mu1 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_mu1$type <- "low"
params <- c(beta=0.3,gamma=1/7,alpha=0.1,mu=0.05) #function c "c"ombines values into
rising_mu2 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_mu2$type <- "medium"
params <- c(beta=0.3,gamma=1/7,alpha=0.1,mu=0.1) #function c "c"ombines values into
rising_mu3 <- as.data.frame(ode(xstart,times,sir.model.dem_open,params))
rising_mu3$type <- "high"
rising_mu <- rbind(rising_mu1,rising_mu2,rising_mu3)
ggplot(rising_alpha,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
ggplot(rising_mu,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
#install.packages("deSolve")
library(deSolve)
require(deSolve) #deSolve library needed for this computing session
seir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1] #create local variable S, the first element of x
E <- x[2]
I <- x[3] #create local variable I
R <- x[4] #create local variable R
with( #we can simplify code using "with"
as.list(params), #this argument to "with" lets us use the variable names
{ #the system of rate equations
dS <- beta*S*I
dE <- beta*S*I-rho*E
dI <- rho*E-gamma*I
dR <- gamma*I
dx <- c(dS,dE,dI,dR) #combine results into a single vector dx
list(dx) #return result as a list
}
)
}
times <- seq(0,120,by=5) #function seq returns a sequence
params <- c(beta=0.3,gamma=1/7) #function c "c"ombines values into a vector
xstart <- c(S=9999/10000,E=0,I=(1/10000),R=0) #initial conditions
times <- seq(0,120,by=5) #function seq returns a sequence
params <- c(beta=0.3,gamma=1/7) #function c "c"ombines values into a vector
xstart <- c(S=9999/10000,E=0,I=(1/10000),R=0) #initial conditions
#install.packages("deSolve")
library(deSolve)
require(deSolve) #deSolve library needed for this computing session
seir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1] #create local variable S, the first element of x
E <- x[2]
I <- x[3] #create local variable I
R <- x[4] #create local variable R
with( #we can simplify code using "with"
as.list(params), #this argument to "with" lets us use the variable names
{ #the system of rate equations
dS <- beta*S*I
dE <- beta*S*I-rho*E
dI <- rho*E-gamma*I
dR <- gamma*I
dx <- c(dS,dE,dI,dR) #combine results into a single vector dx
list(dx) #return result as a list
}
)
}
times <- seq(0,120,by=5) #function seq returns a sequence
params <- c(beta=0.3,gamma=1/7,rho=0.03) #function c "c"ombines values into a vector
xstart <- c(S=9999/10000,E=0,I=(1/10000),R=0) #initial conditions
params <- c(beta=0.3,gamma=0.12,rho=0.03)
xstart <- c(S=0.999,E=0,I=(0.001),R=0) #initial conditions
seir_dyn1 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn1$type <- "original"
xstart <- c(S=0.499,E=0,I=(0.501),R=0) #initial conditions
seir_dyn2 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn2$type <- "half infected"
xstart <- c(S=0.500,E=0.499,I=(0.001),R=0) #initial conditions
seir_dyn2 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn2$type <- "half latent"
xstart <- c(S=0.500,E=0,I=(0.001),R=0.499) #initial conditions
seir_dyn3 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn3$type <- "half immune"
xstart <- c(S=0.999,E=0,I=(0.001),R=0) #initial conditions
params <- c(beta=0.3,gamma=0.12,rho=0.1)
seir_dyn4 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn4$type <- "medium rho"
params <- c(beta=0.3,gamma=0.12,rho=0.3)
seir_dyn5 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn5$type <- "high rho"
seir_dyn = rbind(seir_dyn1,seir_dyn2,seir_dyn3,seir_dyn4,seir_dyn5)
ggplot(seir_dyn,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
#install.packages("deSolve")
library(deSolve)
require(deSolve) #deSolve library needed for this computing session
seir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1] #create local variable S, the first element of x
E <- x[2]
I <- x[3] #create local variable I
R <- x[4] #create local variable R
with( #we can simplify code using "with"
as.list(params), #this argument to "with" lets us use the variable names
{ #the system of rate equations
dS <- -beta*S*I
dE <- beta*S*I-rho*E
dI <- rho*E-gamma*I
dR <- gamma*I
dx <- c(dS,dE,dI,dR) #combine results into a single vector dx
list(dx) #return result as a list
}
)
}
times <- seq(0,120,by=5) #function seq returns a sequence
params <- c(beta=0.3,gamma=1/7,rho=0.03) #function c "c"ombines values into a vector
xstart <- c(S=9999/10000,E=0,I=(1/10000),R=0) #initial conditions
params <- c(beta=0.3,gamma=0.12,rho=0.03)
xstart <- c(S=0.999,E=0,I=(0.001),R=0) #initial conditions
seir_dyn1 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn1$type <- "original"
xstart <- c(S=0.499,E=0,I=(0.501),R=0) #initial conditions
seir_dyn2 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn2$type <- "half infected"
xstart <- c(S=0.500,E=0.499,I=(0.001),R=0) #initial conditions
seir_dyn2 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn2$type <- "half latent"
xstart <- c(S=0.500,E=0,I=(0.001),R=0.499) #initial conditions
seir_dyn3 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn3$type <- "half immune"
xstart <- c(S=0.999,E=0,I=(0.001),R=0) #initial conditions
params <- c(beta=0.3,gamma=0.12,rho=0.1)
seir_dyn4 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn4$type <- "medium rho"
params <- c(beta=0.3,gamma=0.12,rho=0.3)
seir_dyn5 <- as.data.frame(ode(xstart,times,seir.model.closed,params))
seir_dyn5$type <- "high rho"
seir_dyn = rbind(seir_dyn1,seir_dyn2,seir_dyn3,seir_dyn4,seir_dyn5)
ggplot(seir_dyn,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
ggplot(seir_dyn,aes(x=time,y=I,group=type,color=type)) +
geom_line(size=2) +
theme_minimal()
install.packages('tinytex')
tinytex::install_tinytex()
library(phytools)
di2multi.simmap()
install.packages("phytools")
library(phytools)
US_tjd <- read.csv("US_isolates.csv",header = TRUE,stringsAsFactors = FALSE)
US_tjd$from <- "USA"
NZ_tjd <- read.csv("NZ_isolates.csv",header = TRUE,stringsAsFactors = FALSE)
NZ_tjd$from <- "NZ"
UK_tjd <- read.csv("UK_isolates.csv",header = TRUE,stringsAsFactors = FALSE)
UK_tjd$from <- "UK"
mbov_tjd <- rbind(US_tjd,NZ_tjd,UK_tjd)
species_tjd %>% ggplot(aes(y = tjd, x = from)) +
geom_boxplot(col = "steelblue") +
theme_minimal() +
coord_flip()
library(dplyr)
species_tjd %>% ggplot(aes(y = tjd, x = from)) +
geom_boxplot(col = "steelblue") +
theme_minimal() +
coord_flip()
possum_tjd <- read.csv("possum.csv",header = TRUE,stringsAsFactors = FALSE)
possum_tjd$from <- "possum"
badger_tjd <- read.csv("badger.csv",header = TRUE,stringsAsFactors = FALSE)
badger_tjd$from <- "badger"
ferret_tjd <- read.csv("ferret.csv",header = TRUE,stringsAsFactors = FALSE)
ferret_tjd$from <- "ferret"
deer_tjd <- read.csv("deer.csv",header = TRUE,stringsAsFactors = FALSE)
deer_tjd$from <- "deer"
bovinenz_tjd <- read.csv("bovine_nz.csv",header = TRUE,stringsAsFactors = FALSE)
bovinenz_tjd$from <- "bovine_nz"
bovineus_tjd <- read.csv("bovine_us.csv",header = TRUE,stringsAsFactors = FALSE)
bovineus_tjd$from <- "bovine_us"
bovineuk_tjd <- read.csv("bovine_uk.csv",header = TRUE,stringsAsFactors = FALSE)
bovineuk_tjd$from <- "bovine_uk"
species_tjd <- rbind(badger_tjd,possum_tjd,ferret_tjd,deer_tjd,bovineuk_tjd,bovinenz_tjd,bovineus_tjd)
species_tjd %>% ggplot(aes(y = tjd, x = from)) +
geom_boxplot(col = "steelblue") +
theme_minimal() +
coord_flip()
library(ggplot2)
species_tjd %>% ggplot(aes(y = tjd, x = from)) +
geom_boxplot(col = "steelblue") +
theme_minimal() +
coord_flip()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("ellipsis")
install.packages("ellipsis")
install.packages(c("gt", "reshape"))
knitr::opts_chunk$set(echo = TRUE)
library(reshape)
library(ggplot2)
library(gt)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
recomb_heat = read.csv("recombination_heatmap.csv",header = TRUE)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
recomb_heat = read.csv("recombination_heatmap.csv",header = TRUE)
recomb.melted = melt(recomb_heat, id="label")
#head(recomb.melted)
ggplot(recomb.melted, aes(variable,label,fill=factor(value))) +
geom_tile() +
scale_fill_manual(label=c("absent","present"),values=c("white","red")) +
theme(axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks =element_blank(),
) +
ggtitle("Heatmap of genomic regions impacted by homologous recombination") +
xlab("genomic region") +
ylab("sample") +
labs(fill = "evidence of HR")
recomb_genes <- read.table("recomb_gene.tbl",col.names = paste0("V",seq_len(10)), fill=TRUE)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
View(hr_stats)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram(binwidth = 10)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram(binwidth = 30)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram(binwidth = 20)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram(binwidth = 10)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length)) +
geom_histogram(binwidth = 10) +
theme_minimal()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,fill = "steelblue")) +
geom_histogram(binwidth = 10,) +
theme_minimal()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,col = "steelblue")) +
geom_histogram(binwidth = 10,) +
theme_minimal()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,color = "steelblue") +
theme_minimal()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal()
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
import_num <- read.csv("isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("ProjectBovisReservoir_metadata.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(accession_meta,by = c("label"= "ï..Sample"))
library(reshape)
library(ggplot2)
library(gt)
library(dplyr)
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
import_num <- read.csv("isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("ProjectBovisReservoir_metadata.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(accession_meta,by = c("label"= "ï..Sample"))
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
import_num <- read.csv("isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("ProjectBovisReservoir_metadata.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(accession_meta,by = c("label"= "ï..Sample"))
ggplot(import_num, aes(x=Country, y=X0, fill=Country)) +
geom_violin() +
labs(y="Number of Imports") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
ggplot(subset(import_num,import_num$Species != "STOAT-NZ"), aes(x=Species, y=X0, fill=Species)) +
geom_violin() +
labs(y="Number of Imports") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
import_num <- read.csv("isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("ProjectBovisReservoir_metadata.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(accession_meta,by = c("label"= "ï..Sample"))
ggplot(import_num, aes(x=Country, y=X0, fill=Country)) +
geom_boxplot() +
labs(y="Number of Imports") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
ggplot(subset(import_num,import_num$Species != "STOAT-NZ"), aes(x=Species, y=X0, fill=Species)) +
geom_boxplot() +
labs(y="Number of Imports") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
setwd("~/../../../Documents/summer_project/Summer2021_mbov/dependencies/")
hr_stats <- read.csv("recombination_stats.csv")
hr_stats %>% ggplot(aes(x=Import.Length,)) +
geom_histogram(binwidth = 10,fill = "steelblue") +
theme_minimal() +
xlab("size of the homologous recombination region")
hr_stats %>% ggplot(aes(x=No..SNPs,)) +
geom_histogram(binwidth = 1,fill = "steelblue") +
theme_minimal() +
xlab("No. of SNPs within a homologous recombination region")
import_num <- read.csv("isolate_import_num.csv",header = TRUE)
accession_meta <- read.csv("ProjectBovisReservoir_metadata.csv", header = TRUE, stringsAsFactors = FALSE)
import_num <- import_num %>% left_join(accession_meta,by = c("label"= "ï..Sample"))
ggplot(import_num, aes(x=Country, y=X0, fill=Country)) +
geom_boxplot() +
labs(y="Number of Imports") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
ggplot(subset(import_num,import_num$Species != "STOAT-NZ"), aes(x=Species, y=X0, fill=Species)) +
geom_boxplot() +
labs(y="Number of homologous recombination regions") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "gray80"),
panel.grid.minor = element_line(size = 0.25, linetype = 'solid',
colour = "gray80"))
library(ggtree)
BiocManager::install("ggtree")
BiocManager::install("ggtree")
BiocManager::install("ggtree")
source("https://bioconductor.org/biocLite.R")
BiocManager::install("ggtree",force = TRUE)
BiocManager::install("ggtree",force = TRUE)
BiocManager::install("ggtree",force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(reshape)
library(ggplot2)
library(gt)
library(dplyr)
library(ggtree)
library(phytools)
library(patchwork)
library(tidyr)
library(fastbaps)
install.packages("fastbaps")
library(reshape)
library(ggplot2)
library(gt)
library(dplyr)
library(ggtree)
library(phytools)
library(patchwork)
library(tidyr)
#library(fastbaps)
library(ape)
library(ggnewscale)
library(gridExtra)
setwd("../../../Documents/Summer2021_mbov/dependencies/")
setwd("../dependencies/")
recomb_heat = read.csv("recombination_heatmap.csv",header = TRUE)
pre_regions <- as.data.frame(colnames(recomb_heat))
pre_regions$regions <- gsub("X","",pre_regions$`colnames(recomb_heat)`)
pre_regions <- subset(pre_regions,pre_regions$regions != "label")
regions <- pre_regions %>% separate(regions,c("start","end"))
regions$start <- as.numeric(regions$start)
regions$end <- as.numeric(regions$end)
regions$coords <- floor((regions$end + regions$start)/2)
#regions <- regions[order(regions$coords),]
colnames(recomb_heat) <- c("label",regions$coords)
recomb_heat <- recomb_heat[,!duplicated(colnames(recomb_heat))]
recomb_heat <- recomb_heat[,order(as.numeric(names(recomb_heat)))]
#unique recombination events omitted
#recomb_heat <- recomb_heat[,colSums(data.matrix(recomb_heat)) > 1]
regions %>% ggplot(aes(x = coords)) +
geom_point(aes(y = 0),color = "red", size = 3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.background = element_blank()) +
xlim(0, 4.4e+06)
recomb.melted = melt(recomb_heat, id="label")
#head(recomb.melted)
ggplot(recomb.melted, aes(variable,label,fill=factor(value))) +
geom_tile() +
scale_fill_manual(label=c("absent","present"),values=c("white","black")) +
theme(text = element_text(size = 15),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks =element_blank(),
legend.key = element_rect(fill = "white", colour = "black")
) +
xlab("genomic region") +
ylab("sample") +
labs(fill = "evidence of HR")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
install.packages("ellipsis")
